name: HHLA Sky SC - CI/CD

on: 
  pull_request:
    branches: 
      - main
  workflow_dispatch:
    inputs:
      toolchain:
        type: choice
        description: Select toolchain
        options:
          - stm32-gcc-toolchain
          - bxarm-toolchain
        default: 'stm32-gcc-toolchain'
      configuration:
        type: choice
        description: Select configuration
        options:
          - debug
          - release
        default: 'debug'
      run-linux-jobs:
        type: boolean
        required: true
  release:
    types: [created]   

jobs:
  Linux-Build:
    if: ${{ github.event_name == 'pull_request' || inputs.run-linux-jobs == true }}
    runs-on: ubuntu-22.04
    steps:
      - name: Setup Ubuntu
        run: |
          sudo apt update && sudo apt install -y \
          build-essential \
          cmake \
          binutils \
          gcc-multilib \
          g++-multilib \
          gcovr \
          git

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Configure the project using CMake
      - name: Configure with CMake
        run: |
          mkdir -p build
          cmake -S . -B build

      # Build the project
      - name: Build project
        run: |
          cmake --build build -j$(nproc --all)

      # Upload build directory as artifact for testing job
      - name: Upload build artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build

      # Create issue on failure
      - name: Create issue on failure
        if: failure()
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Build Failed"
          content-filepath: ./build-failure.txt
          labels: bug, build-failure

  Linux-Unit_Test:
    if: ${{github.event_name == 'pull_request' || inputs.run-linux-jobs == true}}
    runs-on: ubuntu-22.04
    needs: Linux-Build  # Ensures test job runs after build job

    steps:
      # Download build artifact from build job
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build

      # Grant execute permissions to test binaries
      - name: Grant execute permissions to test binaries
        run: chmod +x build/tests/*

      # Run tests using CTest
      - name: Run tests
        run: |
          ctest --test-dir build -j$(nproc --all) -C Debug
      
      - name: Debug Condition
        run: echo "Condition evaluated to ${{ github.event_name == 'release' || github.event.pull_request.merged || (github.event_name == 'workflow_dispatch' && inputs.configuration == 'release') }}"
      
      - name: Log GitHub Context
        run: echo "${{ toJson(github) }}"
      

      # Create issue on failure
      - name: Create issue on failure
        if: failure()
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Test Failed"
          content-filepath: ./test-failure.txt
          labels: bug, test-failure

  Target-Build:
    name: ${{ inputs.toolchain == 'stm32-gcc-toolchain' && 'STM32-GCC' || 'BXARM'}}
    uses: ./.github/workflows/reusable_build.yml
    with: 
      toolchain: ${{ github.event_name == 'workflow_dispatch' && inputs.toolchain || 'bxarm-toolchain'}}
      configuration: ${{ github.event_name == 'workflow_dispatch' && inputs.configuration || 'release'}} # Maybe relase\debug
    needs: Linux-Unit_Test
    if: |
      always()
      && !contains(needs.*.result, 'failure')
      && !contains(needs.*.result, 'cancelled')

  Target-Deploy:
    name: ${{ inputs.toolchain == 'stm32-gcc-toolchain' && 'STM32-GCC' || 'BXARM'}}
    uses: ./.github/workflows/reusable_deploy_and_test.yml
    needs: Target-Build
    if: |
      always()
      && contains(needs.*.result, 'success')
  
  GitHub-Package:
    if: ${{ github.event_name == 'release' || github.event.pull_request.merged || (github.event_name == 'workflow_dispatch' && inputs.configuration == 'release') }}
    runs-on: ubuntu-22.04
    needs: Target-Build

    steps:
      - name: Download ELF
        uses: actions/download-artifact@v4
        with:
          name: STM32-Microcontroller_Binary
          path: ./STM32-Microcontroller_Binary

      - name: Verify downloaded artifact
        run: |
          echo "Current directory: $(pwd)"
          ls -R STM32-Microcontroller_Binary

      - name: Package Artifact 
        run: |
          mkdir -p release-packages
          mv STM32-Microcontroller_Binary/*.elf release-packages/
          cd release-packages
          tar -czvf stm32_project_${{ github.event.release.tag_name || 'latest' }}.tar.gz *.elf

      - name: Upload to GitHub Packages
        uses: actions/upload-artifact@v4
        with:
          name: stm32_project_${{ github.event.release.tag_name || 'latest' }}
          path: release-packages/stm32_project_${{ github.event.release.tag_name || 'latest' }}.tar.gz

